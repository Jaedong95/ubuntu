0. Docker 설치하기 
1) docker 파일 다운로드
$ curl -fsSL https://get.docker.com -o get-docker.sh

2) Docker Engine 패키지 설치 
$ sudo sh get-docker.sh 

3) Docker start 
$ sudo service docker start 

4) docker 그룹에 sudo 추가
$ sudo usermod -a -G docker ubuntu


1. Docker 명령어 
1) Docker 생성하기 
$ docker run -it --name <example> [이미지 id:태그]

2) Docker 실행하기 
$ docker start [컨테이너 ID] 

3) Docker Container 진입하기
$ docker exec -it [컨테이너 ID] /bin/bash

4) Docker Container 삭제하기 
$ docker rm [컨테이너 id]  (실행 중인 컨테이너 → docker rm -f [컨테이너 id]

5) Docker Img 삭제하기 
$ docker rmi [이미지 id]  (물려있는 컨테이너가 있을 경우 → docker rm -f [이미지 id])

6) Docker Container 저장
$ docker commit [컨테이너 이름] [저장할 이미지명]:[태그 이름]

7) Docker Container 및 Docker Img 조회
$ docker ps (-a / -al)
$ docker image ls

8) 현재 작업중인 컨테이너 파일로 저장 
현재 작업중인 컨테이너 파일로 저장 

9) Docker Container에 파일 전송 
$ docker cp /path/to_file.txt [container_id]:/path/to_file.txt 

2. Docker Hub 사용하기 (Docker Img 업로드 및 다운로드)
0) Docker Hub에 로그인 
$ docker login   # username, password 입력 

1) Docker Hub에 업로드 할 이미지 태그 
$ docker tag local-image:tagname new-repo:tagname

2) Docker Hub에 이미지 업로드 
$ docker push new-repo:tagname

3. Multi-GPU 환경에서 GPU 지정하여 Docker 진입하기 
1) gpu 하나 사용하여 진입 
$ docker run -it --rm --gpus '"device=1"' --memory='30g' --memory-swap='60g' --name [도커이름] --ipc=host -v /home/mabrain_0x/[사용디렉토리]:[도커에서 사용할 디렉토리] [사용img이름:태그] /bin/bash

ex) docker run -it --name C3D_cori --ipc=host -v /

2) 여러 gpu 사용하여 진입
$ docker run -it --rm --gpus '"device=1,2,3"' --memory='30g' --memory-swap='60g' --name [도커이름] --ipc=host -v /home/mabrain_0x/[사용디렉토리]:[도커에서 사용할 디렉토리] [사용img이름:태그] /bin/bash

3) 모든 gpu 사용하여 진입 
$ nvidia-docker run -it --name 3d_cori --gpus all -p 8888:8888 jaedong/3d_convolution:latest


* 
$ nvidia-docker run -it --name 3d_cori --gpus all -v /home/ubuntu/jupyter:~/ -p 8888:8888 ce8f7398433c 

4. Docker에 Jupyter Notebook 띄우기 
-> 확인해야 할 사항: subnet ip, passwd, notebook_dir 
0) docker 진입 
$ docker start [container_id]
$ docker attach [container_id] 

1) net-tools 설치 
$ apt-get install net-tools 

2) inet 확인 
$ ifconfig 
-> inet 값 기록해두기

3) passwd() setting 
$ python
$ from notebook.auth import passwd

$ passwd()
-> 패스워드 설정 후 나오는 값 기록해두기 

3) jupyter notebook 설치 
$ pip install jupyter notebook

4) configure 파일 생성 
$ jupyter notebook --generate-config


5) configure 파일 수정 
$ vi /.jupyter/jupyter_notebook_config.py 

-> 파일의 맨 아래에 
c = get_config()

c.NotebookApp.passwd = u'passwd'
c.NotebookApp.ip = 'ipnet'
c.NotebookApp.notebook_dir = 'notebook_dir' 

추가 후 저장 

[docker 관련 error]
1) docker 내에서 apt-get 수행 시 'unable to locate package error'가 발생하는 경우
$ apt-get update 

수행 후 다시 apt-get 명령어를 통해 package 설치 

2) docker 내에서 apt-get 수행 시 'temporary failure resolving us.archive.ubuntu.com' error가 발생하는 경우 
$ echo "nameserver 8.8.8.8" | tee /etc/resolv.conf > /dev/null
$ apt-get update 

-> DNS 관련 문제로 인해 발생하는 오류이다. 8.8.8.8은 구글이 보유하고 있는 DNS Server로, 위 명령어를 통해 구글에 연결해 주었다. 


[docker 삭제] 
1. Docker 설치 여부 확인  
$ dpkg -l | grep -i docker 

2. docker 삭제 
$ sudo apt purge docker-ce

# 제대로 삭제가 안되었을 경우 
$ sudo apt-get purge -y docker-engine docker docker.io docker-ce
$ sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce

3.디렉토리 삭제 
$ sudo rm -rf /var/lib/docker
$ sudo rm -rf /etc/docker 


